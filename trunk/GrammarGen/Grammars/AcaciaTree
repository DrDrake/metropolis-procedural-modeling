// Good params for branch_density, two_branch_prob, and width_scale
// 5, 1, 1.1 

#define branch_density 5
#define two_branch_prob 1

#define initial_width    0.0025
#define width_multiplier 1.1

#define upward_tendency 0.6


#define	angle_left  UniformSample(25,60)
#define angle_right UniformSample(25,60)
#define phylo_angle 137.5

// Stem length variation: 1 no variation, 0.5 is nice, 0.1 wild
#define stem_length_variation 0.6

#define trunk_prob   0.0
#define trunk_length 0.4

#define scale_mono 0.90
#define scale_left  0.89
#define scale_right  0.87
#define branch_scale 0.75

// Leaves
#define leaf_upward_tendency 2.4
#define leaf_gravity -0.4
#define one_leaf_prob 0.2

#define tree_age 25
#define derivation_steps 30  // must be tree_age plus at least 5

#define init_budget (tree_age*tree_age*branch_density)

#define StemLength(s) UniformSample(s*stem_length_variation,s)

#define Branch(len,n,budget,t) Turnperptovec(0,0.15*(tree_age-n),0) Width(initial_width * exp(log(budget)/2.2)) Stem(StemLength(len),n,t) L(len,budget)

DerivationLength: derivation_steps;

Axiom : Color(0.6,0.3,0.1)+(NormalSample(0,10))^(NormalSample(0,10))/(phylo_angle+NormalSample(90,90))Branch(trunk_length,tree_age,init_budget,1)A(tree_age,1, phylo_angle, 1, init_budget);


// Terminate branch when n is 0
A(n,s,pa,asc,budget) : budget < 0.3 || n == 0 -> E;
A(n,s,pa,asc,budget) <0.01> -> E;

// Two new branches
#define PROB_TWO (two_branch_prob + (1-two_branch_prob)*budget/(exp(log(2)*n)))

A(n,s,pa,asc,budget) < PROB_TWO*0.4 > : budget >= 1.3 && n > 0 -> /(pa+UniformSample(-25,25))Turntovec(0, upward_tendency,0) Branch(s,n,budget,2) [-(angle_left*asc)A(n-1,s*scale_left,pa,-1*asc,(budget-1)*0.5)] +(angle_right*asc)A(n-1,s*scale_right,pa,-1*asc,(budget-1)*0.5);

A(n,s,pa,asc,budget) < PROB_TWO*0.3 > : budget >= 1.3 && n > 0 -> /(pa+UniformSample(-25,25))Turntovec(0, upward_tendency,0) Branch(s,n,budget,2) [-(angle_left*asc*0.9)A(n-1,s*scale_left,pa,-1*asc,(budget-1)*0.6)] +(angle_right*asc*1.1)A(n-1,s*scale_right,pa,-1*asc,(budget-1)*0.4);

A(n,s,pa,asc,budget) < PROB_TWO*0.2 > : budget >= 1.3 && n > 0 -> /(pa+UniformSample(-25,25))Turntovec(0, upward_tendency,0) Branch(s,n,budget,2) [-(angle_left*asc*0.8)A(n-1,s*scale_left,pa,-1*asc,(budget-1)*0.7)] +(angle_right*asc*1.2)A(n-1,s*scale_right,pa,-1*asc,(budget-1)*0.3);

A(n,s,pa,asc,budget) < PROB_TWO*0.1 > : budget >= 1.3 && n > 0 -> /(pa+UniformSample(-25,25))Turntovec(0, upward_tendency,0) Branch(s,n,budget,2) [-(angle_left*asc*0.6)A(n-1,s*scale_left,pa,-1*asc,(budget-1)*0.8)] +(angle_right*asc*1.4)A(n-1,s*scale_right,pa,-1*asc,(budget-1)*0.2);

A(n,s,pa,asc,budget) < PROB_TWO*0.05 > : budget >= 1.3 && n > 0 -> /(pa+UniformSample(-25,25))Turntovec(0, upward_tendency,0) Branch(s,n,budget,2) [-(angle_left*asc*0.4)A(n-1,s*scale_left,pa,-1*asc,(budget-1)*0.9)] +(angle_right*asc*1.6)A(n-1,s*scale_right,pa,-1*asc,(budget-1)*0.1);

// One new branch
A(n,s,pa,asc,budget) < 1 - PROB_TWO > : budget >= 0.3 && n > 0 -> /(pa+UniformSample(-25,25)) Turntovec(0,upward_tendency*0.5,0) Branch(s,n,budget,1) +(angle_right)A(n-1,s*scale_right,pa,asc,budget-1);


// Approximates the pipe model with value in 2-3
//Width(w,n) : n > 0 -> Width(w * exp(log(n)/2.2),0);

// Leaves
L(s,n) <one_leaf_prob> : n < 5 -> Color(0.1,0.7,0) [/(180)^(130) Turnztovec(0,leaf_upward_tendency,0) Turntovec(0,leaf_gravity,0)Leafconnector(s*0.3*1.1)Leaf(s*0.7,s*0.7)] Color(0.6,0.3,0.1);
L(s,n) <one_leaf_prob> : n < 5 -> Color(0.1,0.7,0) [^(130) Turnztovec(0,leaf_upward_tendency,0) Turntovec(0,leaf_gravity,0)Leafconnector(s*0.3*1.1)Leaf(s*0.7,s*0.7)] Color(0.6,0.3,0.1);
L(s,n) <1-2*one_leaf_prob> : n < 5 -> Color(0.1,0.7,0) [^(130) Turnztovec(0,leaf_upward_tendency,0) Turntovec(0,leaf_gravity,0)Leafconnector(s*0.3*1.1)Leaf(s*0.7,s*0.7)][/(180)^(130) Turnztovec(0,leaf_upward_tendency,0) Turntovec(0,leaf_gravity,0)Leafconnector(s*0.3*1.1)Leaf(s*0.7,s*0.7)] Color(0.6,0.3,0.1);

